// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set StoreQuerySet

// StoreQuerySet is an queryset type for Store
type StoreQuerySet struct {
	db *gorm.DB
}

// NewStoreQuerySet constructs new StoreQuerySet
func NewStoreQuerySet(db *gorm.DB) StoreQuerySet {
	return StoreQuerySet{
		db: db.Model(&Store{}),
	}
}

func (qs StoreQuerySet) w(db *gorm.DB) StoreQuerySet {
	return NewStoreQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) All(ret *[]Store) error {
	return qs.db.Find(ret).Error
}

// CapacityEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CapacityEq(capacity int) StoreQuerySet {
	return qs.w(qs.db.Where("capacity = ?", capacity))
}

// CapacityGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CapacityGt(capacity int) StoreQuerySet {
	return qs.w(qs.db.Where("capacity > ?", capacity))
}

// CapacityGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CapacityGte(capacity int) StoreQuerySet {
	return qs.w(qs.db.Where("capacity >= ?", capacity))
}

// CapacityIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CapacityIn(capacity int, capacityRest ...int) StoreQuerySet {
	iArgs := []interface{}{capacity}
	for _, arg := range capacityRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("capacity IN (?)", iArgs))
}

// CapacityLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CapacityLt(capacity int) StoreQuerySet {
	return qs.w(qs.db.Where("capacity < ?", capacity))
}

// CapacityLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CapacityLte(capacity int) StoreQuerySet {
	return qs.w(qs.db.Where("capacity <= ?", capacity))
}

// CapacityNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CapacityNe(capacity int) StoreQuerySet {
	return qs.w(qs.db.Where("capacity != ?", capacity))
}

// CapacityNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CapacityNotIn(capacity int, capacityRest ...int) StoreQuerySet {
	iArgs := []interface{}{capacity}
	for _, arg := range capacityRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("capacity NOT IN (?)", iArgs))
}

// Count is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Store) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CreatedAtEq(createdAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CreatedAtGt(createdAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CreatedAtGte(createdAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CreatedAtLt(createdAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CreatedAtLte(createdAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) CreatedAtNe(createdAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Store) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) Delete() error {
	return qs.db.Delete(Store{}).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) DeletedAtEq(deletedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) DeletedAtGt(deletedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) DeletedAtGte(deletedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) DeletedAtIsNotNull() StoreQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) DeletedAtIsNull() StoreQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) DeletedAtLt(deletedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) DeletedAtLte(deletedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) DeletedAtNe(deletedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) GetUpdater() StoreUpdater {
	return NewStoreUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDEq(ID uint) StoreQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDGt(ID uint) StoreQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDGte(ID uint) StoreQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDIn(ID uint, IDRest ...uint) StoreQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDLt(ID uint) StoreQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDLte(ID uint) StoreQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDNe(ID uint) StoreQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) IDNotIn(ID uint, IDRest ...uint) StoreQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) Limit(limit int) StoreQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameEq(name string) StoreQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameIn(name string, nameRest ...string) StoreQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameNe(name string) StoreQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) NameNotIn(name string, nameRest ...string) StoreQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs StoreQuerySet) One(ret *Store) error {
	return qs.db.First(ret).Error
}

// OrderAscByCapacity is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByCapacity() StoreQuerySet {
	return qs.w(qs.db.Order("capacity ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByCreatedAt() StoreQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByDeletedAt() StoreQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByID() StoreQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderAscByUpdatedAt() StoreQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCapacity is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByCapacity() StoreQuerySet {
	return qs.w(qs.db.Order("capacity DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByCreatedAt() StoreQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByDeletedAt() StoreQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByID() StoreQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) OrderDescByUpdatedAt() StoreQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// SetCapacity is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetCapacity(capacity int) StoreUpdater {
	u.fields[string(StoreDBSchema.Capacity)] = capacity
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetCreatedAt(createdAt time.Time) StoreUpdater {
	u.fields[string(StoreDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetDeletedAt(deletedAt *time.Time) StoreUpdater {
	u.fields[string(StoreDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetID(ID uint) StoreUpdater {
	u.fields[string(StoreDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetName(name string) StoreUpdater {
	u.fields[string(StoreDBSchema.Name)] = name
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u StoreUpdater) SetUpdatedAt(updatedAt time.Time) StoreUpdater {
	u.fields[string(StoreDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u StoreUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u StoreUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) UpdatedAtEq(updatedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) UpdatedAtGt(updatedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) UpdatedAtGte(updatedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) UpdatedAtLt(updatedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) UpdatedAtLte(updatedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs StoreQuerySet) UpdatedAtNe(updatedAt time.Time) StoreQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set StoreQuerySet

// ===== BEGIN of Store modifiers

// StoreDBSchemaField describes database schema field. It requires for method 'Update'
type StoreDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f StoreDBSchemaField) String() string {
	return string(f)
}

// StoreDBSchema stores db field names of Store
var StoreDBSchema = struct {
	ID        StoreDBSchemaField
	CreatedAt StoreDBSchemaField
	UpdatedAt StoreDBSchemaField
	DeletedAt StoreDBSchemaField
	Name      StoreDBSchemaField
	Capacity  StoreDBSchemaField
}{

	ID:        StoreDBSchemaField("id"),
	CreatedAt: StoreDBSchemaField("created_at"),
	UpdatedAt: StoreDBSchemaField("updated_at"),
	DeletedAt: StoreDBSchemaField("deleted_at"),
	Name:      StoreDBSchemaField("name"),
	Capacity:  StoreDBSchemaField("capacity"),
}

// Update updates Store fields by primary key
// nolint: dupl
func (o *Store) Update(db *gorm.DB, fields ...StoreDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"name":       o.Name,
		"capacity":   o.Capacity,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Store %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// StoreUpdater is an Store updates manager
type StoreUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewStoreUpdater creates new Store updater
// nolint: dupl
func NewStoreUpdater(db *gorm.DB) StoreUpdater {
	return StoreUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Store{}),
	}
}

// ===== END of Store modifiers

// ===== END of all query sets
